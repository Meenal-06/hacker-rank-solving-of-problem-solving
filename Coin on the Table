import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       char input[][] = new char[51][51];
        int dp[][][] = new int[1001][51][51];
        String line;
        int N, M, K;
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        M = scanner.nextInt();
        K = scanner.nextInt();
        scanner.nextLine();
        int finalRow = 0, finalColumn = 0;
        for (int i = 0; i < N; i++) {
            line = scanner.nextLine();
            for (int j = 0; j < M; j++) {
                input[i][j] = line.charAt(j);
                if (input[i][j] == '*') {
                    finalRow = i;
                    finalColumn = j;
                }
            }
        }

        for (int i = 0; i < N; i++)
            for (int j = 0; j < M; j++)
                dp[0][i][j] = (i == finalRow && j == finalColumn) ? 0 : Integer.MAX_VALUE;

        for (int k = 1; k <= K; k++) {
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    int min = Integer.MAX_VALUE;
                    dp[k][i][j] = dp[k - 1][i][j];
                    if (i - 1 >= 0)
                        min = Math.min(sumInfinite(dp[k - 1][i - 1][j], input[i][j] == 'U' ? 0 : 1), min);
                    if (i + 1 < N)
                        min = Math.min(sumInfinite(dp[k - 1][i + 1][j], input[i][j] == 'D' ? 0 : 1), min);
                    if (j - 1 >= 0)
                        min = Math.min(sumInfinite(dp[k - 1][i][j - 1], input[i][j] == 'L' ? 0 : 1), min);
                    if (j + 1 < M)
                        min = Math.min(sumInfinite(dp[k - 1][i][j + 1], input[i][j] == 'R' ? 0 : 1), min);
                    dp[k][i][j] = Math.min(dp[k][i][j], min);
                }
            }
        }
        System.out.print(dp[K][0][0] == Integer.MAX_VALUE ? "-1" : dp[K][0][0]);
    }
    public static int sumInfinite(int a, int b) {
        return (a == Integer.MAX_VALUE || b == Integer.MAX_VALUE) ? Integer.MAX_VALUE : (a + b);
    }
}
