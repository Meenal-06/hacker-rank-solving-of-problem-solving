import java.io.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.*;

public class Solution {

  static class Node {
    int src;
    int weight;

    public Node(int src, int weight) {
      this.src = src;
      this.weight = weight;
    }
  }

  static class Pll implements Comparable<Pll>  {
    long dis0;
    long dis1;

    public Pll(long dis0, long dis1) {
      this.dis0 = dis0;
      this.dis1 = dis1;
    }

    @Override
    public int compareTo(Pll o) {
      if (dis0 != o.dis0) {
        return  dis0 > o.dis0? 1 : -1;
        
      } else {
        if (dis1 == o.dis1) return 0;
        return  dis1 > o.dis1 ? 1 : -1;
      }
    }
  }

  static class NodeQ implements Comparable<NodeQ> {
    long dis;
    int se;

    public NodeQ(long fi, int se) {
      this.dis = fi;
      this.se = se;
    }

    @Override
    public int compareTo(NodeQ o) {
      if (dis == o.dis) return 0;
      return dis > o.dis ? 1 : -1;
    }
  }
  
  static final int N = 100000;
  static final NumberFormat FORMATTER = new DecimalFormat("#0.00000");
  static boolean[] vis = new boolean[N];
  static long[] d0 = new long[N];
  static long[] d1 = new long[N];
  static List<Node>[] nodes = new List[N];

  static void dijkstra(int n, int src, long d[]) {
    for (int i=0; i <n; i++) {
      vis[i] = false;
      d[i] = Long.MAX_VALUE/3;
    }
    d[src] = 0;
    PriorityQueue<NodeQ> queue = new PriorityQueue<>();
    queue.add(new NodeQ(0, src));
    while (!queue.isEmpty()) {
      NodeQ x = queue.poll();
      if (vis[x.se]) {
        continue;
      }
      vis[x.se] = true;
      for (Node e: nodes[x.se]) {
        if (x.dis+e.weight < d[e.src]) {
          queue.add(new NodeQ(d[e.src] = x.dis+e.weight, e.src));
        }
      }
    }
  }
  
  static double[] solve(int n, int k, int x, int y, int z) {
    dijkstra(n, x, d0);
    dijkstra(n, y, d1);
    Pll[] a = new Pll[n];
    for (int i = 0; i < n; i++) {
      a[i] = new Pll(d0[i], d1[i]);
    }
    Arrays.sort(a);
    long result0 = 0;
    long result1 = 2*a[n-1].dis0;
    int p = n-1;
    for (int i = n-1; --i >= 0; )
      if (a[i].dis1 > a[p].dis1) {
        long t = a[i].dis0+a[p].dis1+z;
        if (t < result1) {
          result0 = a[p].dis1+z-a[i].dis0;
          result1 = t;
        }
        p = i;
      }
    long t = 2*a[p].dis1;
    if (t < result1) {
      result1 = t;
      result0 = 2*z;
    }
    return new double[] { result0*.5, result1*.5};
  }
  
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

    StringTokenizer st = new StringTokenizer(br.readLine());
    int t = Integer.parseInt(st.nextToken());

    for (int tItr = 0; tItr < t; tItr++) {
      st = new StringTokenizer(br.readLine());
      int n = Integer.parseInt(st.nextToken());
      int m = Integer.parseInt(st.nextToken());
      int k = Integer.parseInt(st.nextToken())-1;

      for (int i=0; i< n; i++) {
        if (nodes[i] == null) {
          nodes[i] = new LinkedList<>();
        } else {
          nodes[i].clear();
        }
      }
      
      int x = 0;
      int y = 0;
      int z = 0;
      for (int i = 0; i < m; i++) {
        st = new StringTokenizer(br.readLine());
        int u = Integer.parseInt(st.nextToken())-1;
        int v = Integer.parseInt(st.nextToken())-1;
        int w = Integer.parseInt(st.nextToken());
        if (i == k) {
          x = u;
          y = v;
          z = w;
        }
        nodes[u].add(new Node(v, w));
        nodes[v].add(new Node(u, w));

      }

      double[] result = solve(n, k, x, y, z);
      bw.write(FORMATTER.format(result[0]));
      bw.write(" ");
      bw.write(FORMATTER.format(result[1]));

      bw.newLine();
    }

    bw.close();
    br.close();
  }
}
