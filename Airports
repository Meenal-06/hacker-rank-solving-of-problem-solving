import java.io.*;
import java.util.*;

public class Solution {

  static class Gap {
    int start;
    int size;
    int end;
    boolean outdated = false;

    Gap(int start, int size) {
      this.start = start;
      this.size = size;
      this.end = start + size - 1;
    }

    void split(int cut) {
      if (size == 1) {
        return;
      }
      if (cut == start) {
        Gap split = new Gap(start + 1, size - 1);
        gaps.add(split);
        topGaps.add(split);
        return;
      }
      if (cut == start + size - 1) {
        Gap split = new Gap(start, size - 1);
        gaps.add(split);
        topGaps.add(split);
        return;
      }
      Gap split = new Gap(start, cut - start);
      gaps.add(split);
      topGaps.add(split);
      split = new Gap(cut + 1, size - (cut - start) - 1);
      gaps.add(split);
      topGaps.add(split);
    }

    public int getStart() {
      return start;
    }

    public int getSize() {
      return size;
    }
  }
  
  static int d;
  static int[] positions;
  static int index = 0;
  static int minIndex;
  static int maxIndex;
  static TreeSet<Gap> gaps = new TreeSet<>(Comparator.comparing(Gap::getStart));
  static PriorityQueue<Gap> topGaps = new PriorityQueue<>(Comparator.comparing(Gap::getSize).reversed());
  static int oldLeft;
  static int oldRight;

  static void init() {
    minIndex = 0;
    maxIndex = 0;
    index = 0;
    gaps.clear();
    topGaps.clear();
    Gap rootGap = new Gap(-1000000000, 2000000000);
    gaps.add(rootGap);
    topGaps.add(rootGap);
    oldLeft = -1000000000;
    oldRight = 1000000000;
  }

  static int solveNext() {
    int x = positions[index++];

    if (index == 1) {
      return 0;
    }

    int newSplitPoint = Integer.MAX_VALUE;
    if (x < positions[minIndex]) {
      if (minIndex != maxIndex) {
        newSplitPoint = positions[minIndex];
      }
      minIndex = index - 1;
    } else if (x > positions[maxIndex]) {
      if (minIndex != maxIndex) {
        newSplitPoint = positions[maxIndex];
      }
      maxIndex = index - 1;
    } else {
      newSplitPoint = x;
    }

    if (positions[maxIndex] - positions[minIndex] >= 2 * d - 1) {
      return 0;
    }

    int left = positions[maxIndex] - d + 1;
    if (left > oldLeft) {
      for (Iterator<Gap> iterator = gaps.iterator(); iterator.hasNext();) {
        Gap gap = iterator.next();
        if (left <= gap.start) {
          break;
        }
        gap.outdated = true;
        iterator.remove();
        if (left < gap.start + gap.size) {
          Gap newGap = new Gap(left, gap.size - (left - gap.start));
          gaps.add(newGap);
          topGaps.add(newGap);
          break;
        }
      }
      oldLeft = left;
    }

  int right = positions[minIndex] + d - 1;
    if (right < oldRight) {
      for (Iterator<Gap> iterator = gaps.descendingIterator(); iterator.hasNext();) {
        Gap gap = iterator.next();
        if (right >= gap.end) {
          break;
        }
        gap.outdated = true;
        iterator.remove();
        if (right >= gap.start) {
          Gap newGap = new Gap(gap.start, right - gap.start + 1);
          gaps.add(newGap);
          topGaps.add(newGap);
          break;
        }
      }
      oldRight = right;
    }

    if (newSplitPoint >= left && newSplitPoint <= right) {
      Gap floor = gaps.floor(new Gap(newSplitPoint, 0));
      if (floor != null) {
        if (newSplitPoint <= floor.end) {
          floor.outdated = true;
          gaps.remove(floor);
          floor.split(newSplitPoint);
        }
      }
    }

    if (index == 2) {
      return Math.max(0, d - (positions[maxIndex] - positions[minIndex]));
    }

    while (!topGaps.isEmpty() && topGaps.peek().outdated) {
      topGaps.poll();
    }

    return right - left + 1 - (topGaps.isEmpty() ? 0 : topGaps.peek().size);
  }
  
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

    StringTokenizer st = new StringTokenizer(br.readLine());
    int t = Integer.parseInt(st.nextToken());
    
    for (int i = 0; i < t; i++) {
      st = new StringTokenizer(br.readLine());
      int n = Integer.parseInt(st.nextToken());
      d = Integer.parseInt(st.nextToken());
      positions = new int[n];
      st = new StringTokenizer(br.readLine());
      for (int j = 0; j < n; j++) {
        positions[j] = Integer.parseInt(st.nextToken());
      }
      init();
      for (int j = 0; j < n; j++) {
        int res = solveNext();
        bw.write(res + " ");
      }
      bw.write('\n');
    }

    br.close();
    bw.close();
  }
}
