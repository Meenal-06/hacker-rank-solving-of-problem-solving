import java.io.*;
import java.util.*;

public class Solution {

    public static int getMaxPalindromicSubsequenceProd(String s) {
        if(s==null || s.length()<2) return 0;
        
        int[][] dp=new int[s.length()][s.length()];
        for(int l=1;l<=s.length();l++) {
            for(int i=0;i<s.length()-l+1;i++) {
                int j=i+l-1;
                if(l==1) {
                    dp[i][j]=1;
                } else if(l==2 && s.charAt(i)==s.charAt(j)) {
                    dp[i][j]=2;
                } else {
                    if(s.charAt(i)==s.charAt(j)) dp[i][j]=dp[i+1][j-1]+2;
                    else dp[i][j]=Math.max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        
        
        
        int max=Integer.MIN_VALUE;
        for(int k=0;k<s.length()-1;k++) {
            
            max=Math.max(max, dp[0][k]*dp[k+1][s.length()-1]);
        }
        
        return max;
    }
    
    public static void main(String[] args) {
        
        Scanner in=new Scanner(System.in);
        System.out.println(getMaxPalindromicSubsequenceProd(in.next()));
    }
}
