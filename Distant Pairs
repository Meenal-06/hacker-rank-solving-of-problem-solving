import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;

public class E2 {
    InputStream is;
    PrintWriter out;
    String INPUT = "";
    
    int L;
    
    void solve()
    {
        int n = ni();
        L = ni();
        int[][] rs = new int[n][];
        for(int i = 0;i < n;i++){
            rs[i] = new int[]{ni(), ni(), 0};
            if(rs[i][0] > rs[i][1]){
                int d = rs[i][0]; rs[i][0] = rs[i][1]; rs[i][1] = d;
            }
        }
        int low = 0, high = L+1;
        while(high - low > 1){
            int h = high+low>>>1;
            int[][] sed = new int[n][];
            int p = 0;
            for(int i = 0;i < n;i++){
                if(d(rs[i][0], rs[i][1]) >= h){
                    sed[p++] = rs[i];
                }
            }
            long[] es = new long[7*p];
            int q = 0;
            int[][] zs = new int[p][];
            int[] temp = new int[6];
            for(int i = 0;i < p;i++){
                int[] e = sed[i];
                // [e[0]+h,e[1]-h], [0,e[0]-h],[e[1]+h,L]
                int u = 0;
                if(Math.max(e[1]+h-L, 0) <=  e[0]-h){
                    temp[u++] = Math.max(e[1]+h-L, 0);
                    temp[u++] = e[0]-h;
                }
                if(e[0]+h <= e[1]-h){
                    temp[u++] = e[0]+h;
                    temp[u++] = e[1]-h;
                }
                if(e[1]+h <=  Math.min(L-1, e[0]+L-h)){
                    temp[u++] = e[1]+h;
                    temp[u++] = Math.min(L-1, e[0]+L-h);
                }
                zs[i] = Arrays.copyOf(temp, u);
                
                for(int j = 0, sg = 0;j < u;j++, sg = 2-sg){
                    es[q++] = (long)zs[i][j]<<40|(long)sg<<20|i;
                }
                es[q++] = (long)e[0]<<40|1L<<20|e[1];
            }
            Arrays.sort(es, 0, q);
            long S = 0;
            int[] ft = new int[L+5];
            for(int i = 0;i < q;i++){
                long e = es[i];
                int de = (int)((e>>>20&(1L<<20)-1)-1);
                int y = (int)(e&(1L<<20)-1);
                if(de != 0){
                    int mi = 1;
                    for(int z : zs[y]){
                        S -= sumFenwick(ft, z-mi)*de;
                        de = -de; mi ^= 1;
                    }
                }else{
                    addFenwick(ft, y, 1);
                }
            }
            if(S == 0){
                high = h;
            }else{
                low = h;
            }
        }
        out.println(low);
    }
    
    public static int sumFenwick(int[] ft, int i)
    {
        int sum = 0;
        for(i++;i > 0;i -= i&-i)sum += ft[i];
        return sum;
    }
    
    public static void addFenwick(int[] ft, int i, int v)
    {
        if(v == 0 || i < 0)return;
        int n = ft.length;
        for(i++;i < n;i += i&-i)ft[i] += v;
    }

    
    
    
    int d(int a, int b)
    {
        assert a <= b;
        return Math.min(b-a, a+L-b);
    }
    
    void run() throws Exception
    {
        is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
        out = new PrintWriter(System.out);
        
        long s = System.currentTimeMillis();
        solve();
        out.flush();
        if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
    }
    
    public static void main(String[] args) throws Exception { new E2().run(); }
    
    private byte[] inbuf = new byte[1024];
    public int lenbuf = 0, ptrbuf = 0;
    
    private int readByte()
    {
        if(lenbuf == -1)throw new InputMismatchException();
        if(ptrbuf >= lenbuf){
            ptrbuf = 0;
            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
            if(lenbuf <= 0)return -1;
        }
        return inbuf[ptrbuf++];
    }
    
    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    
    private double nd() { return Double.parseDouble(ns()); }
    private char nc() { return (char)skip(); }
    
    private String ns()
    {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    
    private char[] ns(int n)
    {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while(p < n && !(isSpaceChar(b))){
            buf[p++] = (char)b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
    
    private char[][] nm(int n, int m)
    {
        char[][] map = new char[n][];
        for(int i = 0;i < n;i++)map[i] = ns(m);
        return map;
    }
    
    private int[] na(int n)
    {
        int[] a = new int[n];
        for(int i = 0;i < n;i++)a[i] = ni();
        return a;
    }
    
    private int ni()
    {
        int num = 0, b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private long nl()
    {
        long num = 0;
        int b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}
