import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int T = sc.nextInt();
        
        int M,N;
        for (int i = 0; i < T; i++){
            N = sc.nextInt();
            
            HashMap<Integer,Integer> ladders = new HashMap<>();
            int start, end;
            for (int j = 0; j < N; j++){
                start = sc.nextInt();
                end = sc.nextInt();
                ladders.put(start,end);
            }
            
            HashMap<Integer,Integer> snakes = new HashMap<>();
            M = sc.nextInt();
            for (int j = 0; j < M; j++){
                start = sc.nextInt();
                end = sc.nextInt();
                snakes.put(start, end);
            }
            
            int[] distances = new int[100];
            for (int j = 0; j < 100; j++){
                distances[j] = Integer.MAX_VALUE;
            }
            
            getShortestPathToEnd(getGameGraph(ladders, snakes), 1, distances, 0);
            
            System.out.println(distances[99] == Integer.MAX_VALUE ? -1 : distances[99]);
        }
    }
    
    private static int getShortestPathToEnd(HashMap<Integer,HashSet<Integer>> graph, int start, int[] distances, int depth){
       if (distances[start-1] > depth){
           distances[start-1] = depth;
       }
       else{
           return 0;
       }
        
       if (!graph.get(start).isEmpty()){
           for (Integer child : graph.get(start)){
               //System.out.println(start + " - " + child);
               getShortestPathToEnd(graph, child, distances, depth + 1);
           }
            
           return 0;
       }
       else{
           return -1;
       }
    }
    
    private static HashMap<Integer,HashSet<Integer>> getGameGraph(HashMap<Integer,Integer> ladders, HashMap<Integer,Integer> snakes){
        HashMap<Integer, HashSet<Integer>> graph = new HashMap<>();
        
        HashSet<Integer> neighbours;
        for (int i = 1; i <= 100; i++){
            neighbours = new HashSet<Integer>();
            for (int j = 1; j <= 6 && (i + j <= 100); j++){
                if(ladders.containsKey(i+j)){
                    neighbours.add(ladders.get(i+j));
                }
                else if (snakes.containsKey(i+j)){
                    neighbours.add(snakes.get(i+j));
                }
                else{
                    neighbours.add(i+j);
                }
            }
            graph.put(i, neighbours);
        }
        
        return graph;
    }
}
